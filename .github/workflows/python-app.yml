import logging
import random
import time
import re
import os
import pyfiglet
from termcolor import colored
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

TOKEN = "YOUR_BOT_TOKEN_HERE"  # Replace with your actual bot token

logging.basicConfig(filename="bot.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# Display bot welcome message
def display_title():
    ascii_art = pyfiglet.figlet_format("UNBAN TOOL", font="slant")
    return f"```\n{ascii_art}```\nüõ† *Welcome to the Unban Request Bot!*"

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = display_title()
    keyboard = [
        [InlineKeyboardButton("Submit Unban Request", callback_data="unban")],
        [InlineKeyboardButton("Help", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)

# Help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = "üîπ Use this bot to submit an unban request.\nüîπ Select a reason from the menu.\nüîπ Enter your username and email.\nüîπ Wait for processing."
    await update.message.reply_text(help_text)

# Inline button handler
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "unban":
        keyboard = [
            [InlineKeyboardButton("Nudity", callback_data="1"), InlineKeyboardButton("Impersonation", callback_data="2")],
            [InlineKeyboardButton("Fraud", callback_data="4"), InlineKeyboardButton("Spam", callback_data="6")],
            [InlineKeyboardButton("Something Else", callback_data="7")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("Select your ban reason:", reply_markup=reply_markup)
    
    elif query.data == "help":
        await help_command(update, context)
    
    else:
        await query.message.reply_text(f"üìå You selected: *{query.data}*\nNow, send your username and email.")

# Message handler for username and email input
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if "@" in text and "." in text:  # Simple email validation
        unban_chance = random.randint(40, 100)
        await update.message.reply_text(f"‚úÖ Your request has been submitted!\nüìä Unban chances: {unban_chance}%\nüìß You will receive an update via email.")
        logging.info(f"Unban request sent: {text} (Chance: {unban_chance}%)")
    else:
        await update.message.reply_text("‚ö†Ô∏è Invalid input. Please send your username and email.")

# Main function
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
